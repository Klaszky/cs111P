MS1.txt

Object Course Fields:

	String courseName - Full name of the course (Example: "Data Structures")

	char meetingDay - One of: M, T, W, H, F, or S
	
	String instructor - Name of person teaching the course (Example: "Andrew Tjang")
	
	final int MAXSTUDENTS - Maxim number of students a class can hold
	
	int numStudentsInClass - Number of students currently enrolled in course

	Student[] roster - Array of all the students in a class for the instructor's benefit array's size will be Student[MAXSTUDENTS]
	
	int departmentCode - A three digit int that represents the which department the course is being taken in (Example: 198)
	
	int classCode - A three digit in that represents which specific class is being taken (Example: 112)
	
	int numCredits - An int representing how much credits the class is worth (Example: 4)
	
	Period classTime - One of Nine class periods on one of six days

	*Course[] catalog* - Won't be in the class object, but I will need to store the catalog of all class objects created so that students can add them

Object Student Fields:

	String name - Student's full name
	
	courses[] currentClasses - Array of classes currently being taken 
	
	Final int MAXCOURSES - A student has a maximum number of classes they can take
	
	int numCourses - Number of course that a student is currently taking


Object Period Fields:
	
	int meetingPeriod - An int between 1 - 9 that represents the time of day the class meets

	final double firstClassTime - Where times will start and will essenstiall set the schedule (Example first class is at 8 it will end at 9 there will be a 30 minute break and then period 2 will begin at 9:30)

	double startTime - a positive double that represents the hour to the left of the decimal point and the minutes to the right of the decimal point (Example first class is at 8.0 representing 8 o'clock)

	double endTime - endTime will be StartTime + one hour and a half (Example first class starts at 8.0 so it ends at 8.0 + 1.5 which is 9.5 or 9:30)

	Final double timeBetweenClasses - a fixed number that will be put between each class to give students time to travel from one class to another



#############################################################


Object Course Methods:

	Constructor(String courseName, Period classTime, int numCredits, int departmentCode, int classCode)

	void addStudent(Student s) - adds a student

	void setInstructor(String instructor) - simple setter method

	String getInstructor() - simple getter method

	int getDepartmentCode() - simple getter method

	int getClassCode() - simple getter method

	boolean isFull() - returns true is the course is already full

	boolean isSameTime(Course c) - returns true if the meeting day and period is the same 

	String toString() - will print out: Course Code - Course name - Day of week - Period - Number of credits


Object Student Methods:

	Constructor(String name)-

	boolean addCourse(Course c) - Checks current course periods to make sure there is no overlap.Checks to make sure student isn't at max courses. Checks to make sure Course isn't at its limit of students. If all is cool then adds course to student's "courses" field, increments student's "numCourses", increments course's "numberStudents". Returns true if the class can be added and false if it can't be.

	void removeCourse(Course c) - Removes a student from a class. Decrements course's "numberStudents" and student's "numCourses". Removes course from student's "courses".

	String getStudentsName() - simple getter method

	int getNumCourses() - simple getter method

	void printSchedule() -


Object Period Methods:	

	Constructor(int meetingPeriod) - creates the period char and sets the startTime and endTime 

	private void setStartTime(int meetingPeriod) - Takes the period and figures out the time based by multiplying the period  
	
	int getMeetingPeriod - simple getter method